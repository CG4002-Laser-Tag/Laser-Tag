/*
----------------------------------------------------------------------------------
--	(c) Rajesh C Panicker, NUS,
--  Description : Self-checking testbench for AXI Stream Coprocessor (HLS) implementing the sum of 4 numbers
--	License terms :
--	You are free to use this code as long as you
--		(i) DO NOT post a modified version of this on any public repository;
--		(ii) use it only for educational purposes;
--		(iii) accept the responsibility to ensure that your implementation does not violate any intellectual property of any entity.
--		(iv) accept that the program is provided "as is" without warranty of any kind or assurance regarding its suitability for any particular purpose;
--		(v) send an email to rajesh.panicker@ieee.org briefly mentioning its use (except when used for the course EE4218 at the National University of Singapore);
--		(vi) retain this notice in this file or any files derived from this.
----------------------------------------------------------------------------------
*/

#include <stdio.h>
#include "hls_stream.h"
#include "ap_int.h"

/***************** AXIS with TLAST structure declaration *********************/

struct AXIS_wLAST{
	double data;
	bool last;
};

/***************** Coprocessor function declaration *********************/

void mlp_solution_hls(hls::stream<AXIS_wLAST>& S_AXIS, hls::stream<AXIS_wLAST>& M_AXIS);


/***************** Macros *********************/
#define NUMBER_OF_INPUT_WORDS 16  // length of an input vector
#define NUMBER_OF_OUTPUT_WORDS 5  // length of an input vector
#define NUMBER_OF_TEST_VECTORS 5  // number of such test vectors (cases)

#define HIDDEN_LAYER_1_SIZE 32

/************************** Variable Definitions *****************************/
//int test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05,0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05}; // 4 inputs * 2
/**
double test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0.3050025203548387,0.4475195293879845,0.5355742933800642,-1.1953125,0.96484375,-0.9778855847741936,0.7852111311764203,1.2461652448273612,-2.0,1.1484375,-0.059475806451612906,0.4977829006761008,0.4932869675930172,-1.047851563,0.912109375,-39.875504032258064,131.01913473818806,134.91600021123415,-220.734375,232.3203125,49.366431451612904,148.65692425640162,154.3472013041854,-228.4375,252.65625,91.27923387096774,137.9288067558928,163.5315424453612,-219.5390625,248.1328125,
		0.3169417843870968,0.4084586209243899,0.5117701186813375,-0.467773438,1.34375,-0.8568233367741936,0.8948316197908217,1.2284299181369258,-2.0,0.543945313,-0.09359249003225807,0.33352758132733495,0.3411917257385264,-1.076171875,0.71484375,-67.34122983870968,127.793012907188,142.61517165353547,-233.625,236.671875,66.59047379032258,172.70383566973325,182.47947059427344,-239.5859375,252.65625,84.46925403225806,141.50623043705326,162.8285362517868,-191.6640625,211.9453125,
		0.15439138106451614,0.8877503649687362,0.8868566995205867,-2.0,1.74609375,-0.9129599295161291,1.1415777467428188,1.4472929499889284,-2.0,1.33203125,0.04277973796774194,0.9347346037042363,0.9205292423429268,-1.372070313,1.999023438,18.95967741935484,100.93790777895842,101.09040782915818,-154.0234375,230.421875,-58.64969758064516,147.71209947546095,156.69976714876466,-252.4453125,214.2734375,-155.87399193548387,151.9035059804686,215.93293433854979,-249.90625,194.2578125,
		-0.32242313519354837,0.6787079913568423,0.741445692164287,-2.0,1.943359375,-0.5710055443548386,0.9702599748730227,1.11224271903476,-2.0,0.645507813,0.3726373488387097,1.1137707879895404,1.1572935258137227,-1.259765625,1.999023438,-79.29233870967742,175.1815326912453,189.69947422862944,-249.859375,250.3984375,-26.375252016129032,104.37999057281955,106.0159367882506,-221.578125,251.8203125,-27.748991935483872,147.03865405637507,147.28523750103363,-249.0,251.2578125,
		0.09926285296774194,0.7731717172087295,0.7670488410681348,-2.0,1.791015625,-0.8021988408064517,1.1236014777665517,1.3657518408117717,-2.0,1.111328125,-0.12427545370967742,0.5828807513400464,0.5867151627636273,-0.928710938,1.864257813,22.617691532258064,141.75615769183565,141.273311680024,-206.0546875,252.5546875,-34.64415322580645,151.78047538093705,153.27880133932467,-252.6796875,232.046875,-95.41154233870968,148.7758034860163,174.71002942592963,-235.359375,239.140625,
		-0.30276587725806453,0.3387097831356468,0.4502118492422212,-0.833984375,0.701171875,-0.8042149698709679,0.7574283161898684,1.0963361692427807,-2.0,0.294921875,-0.1682837702903226,0.43214940360948406,0.45721793557085433,-1.924804688,0.51953125,17.819808467741936,130.55094620957502,129.6584097113416,-254.6484375,245.6171875,-7.902721774193548,166.9619185266905,164.43691902564544,-249.6640625,250.59375,0.3528225806451613,157.41581001934372,154.85643469067847,-253.171875,247.0859375,
		-0.2807144658387097,0.47477504285852173,0.5449225807960367,-1.6484375,0.92578125,-1.0569556453548388,0.7643346753536477,1.297118856967369,-2.0,0.404296875,-0.1651020665483871,0.5650098930370298,0.5798249135237199,-2.0,1.138671875,39.040826612903224,137.5630601832346,140.84510323120458,-194.5078125,245.6171875,-9.60710685483871,158.17987531312352,155.90395928966387,-249.6640625,250.59375,24.602318548387096,173.6227617000435,172.56222793691896,-253.171875,247.0859375,
		-0.17578125006451614,0.856245708435185,0.8604682123894154,-2.0,1.999023438,-1.071005544483871,0.986115552930799,1.4450288051346092,-2.0,0.958984375,-0.5073399698709677,0.5761563642882648,0.7606850452310916,-1.362304688,0.772460938,-6.212953629032258,148.79492124644554,146.5071265731961,-211.9453125,196.015625,-40.379788306451616,135.0771173340183,138.88045163445938,-251.328125,231.2890625,-102.69934475806451,149.94298278692494,179.73535746695632,-248.6640625,173.3984375,
		-0.5366368448387098,0.5127395115719681,0.7364782457905306,-1.271484375,1.227539063,-0.8979964719677418,0.729027151866202,1.149231794166339,-2.0,0.36328125,0.3761340726129032,1.0904113123837145,1.1367140952312964,-1.494140625,1.876953125,-110.92338709677419,174.9479783101961,204.75223307304782,-235.6484375,243.3046875,-33.23991935483871,75.32407447455965,81.2132090924019,-173.0390625,242.953125,10.662802419354838,154.68553593419534,152.54327855863508,-249.25,251.0078125,
		-0.41885080667741936,0.4291139310551179,0.5946720137117432,-1.192382813,0.37890625,-0.9826738912903227,0.8060580227211184,1.2627028531395041,-2.0,0.26953125,-0.2615297380322581,0.5680058020980563,0.6169448570706472,-1.752929688,0.859375,32.46648185483871,129.92806062071406,131.8742404185122,-199.7578125,245.6171875,-16.007056451612904,179.61911985076108,177.4218454039158,-249.6640625,250.59375,-25.854334677419356,174.75120515113957,173.84284303629903,-253.171875,247.0859375};
*/
double test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {-0.22673875649809397,-4.909947693629265,-1.3069901369924413,-0.3979935082630829,1.139602137182546,-0.5855429024424078,0.6917086512251079,1.259677515751638,-0.4380157693120966,-0.7365155027116193,-0.237719471806788,-0.11870615276563497,-0.4669311106040082,-0.6344474468454501,0.2748070409089354,-0.12790244094801684,
		2.383473664271498,-3.4939844888279694,-2.792464852805342,0.6547511799836923,-0.23945176623347464,0.8912001631667117,-0.6202860152038788,0.07155582444732703,0.09573879846199651,1.0649739940955931,-0.5072950381579792,0.05948018061585261,-0.956207523263159,0.1510816933957376,-0.231714085904775,-0.1035841058487476,
		0.33998104054055384,-3.413604164647751,0.9321071468426214,1.4473088279119108,3.0630127595504244,-1.907398126813901,-0.9756249126293116,-0.5960703435658522,0.16768078120000046,0.06434184482150712,0.5570033726611391,-0.40459783478460376,-0.3222229681381069,-0.8214048533328465,0.3314106996127296,-0.39818807408006346,
		-1.3496251610437575,-1.8359045818003759,2.386923232164141,1.8484530001490438,-2.705849104430722,-0.9879292027464599,2.4215195746940523,2.754444082603949,1.9649025176937036,-2.02934369134744,1.5317157559449626,0.2523620027446705,0.12062637919658695,-0.3241998379714656,0.2477191530271589,-0.1862693976782688,
		-3.000177700911305,-2.5919363377055933,-0.0824503361567656,0.6853165112401378,-0.5836249457826573,-0.39369269426692943,2.4769784530661663,-1.121570955924787,-1.294742774215534,-0.275680380394035,-0.4593845316993066,-1.1211669338040409,1.2438066081388246,1.7920357544416148,-0.6364132341555055,0.2183954141002091};


double test_actual_prediction [NUMBER_OF_OUTPUT_WORDS*NUMBER_OF_TEST_VECTORS] = {4,4,4,2,2};

double test_result_expected_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS];// 4 outputs *2
double result_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS]; // same size as test_result_expected_memory

int c_result_prediction[NUMBER_OF_TEST_VECTORS];
int rtl_result_prediction[NUMBER_OF_TEST_VECTORS];

// ================ weights ===============
double input_weights[NUMBER_OF_INPUT_WORDS][HIDDEN_LAYER_1_SIZE] = {{0.39385363,0.119069204,0.2797985,0.27542505,0.24263263,-0.44716737,0.15835461,0.19720645,0.26853427,-0.12338525,0.31897467,-0.6505485,0.123415984,-0.014848947,-0.34529486,0.31903294,0.28490064,0.30802935,0.43143457,-0.4337678,-0.022795975,0.0752956,-0.14818741,0.0092355395,-0.1757128,-0.6988153,-0.05802781,-0.21068713,0.23485763,0.24488315,0.4558275,0.08566593},
		{0.041146647,0.16189669,-0.011425303,-0.49556273,0.22379269,-0.71002334,0.16657512,-0.35917464,-0.20209576,0.35297343,0.43022153,-0.21180464,0.8211767,0.17284279,0.8136136,0.2980412,-0.2804991,0.4210706,-0.34113923,-0.19680452,-0.3892227,-0.3271072,0.40951848,0.27820423,0.5310172,0.26831096,0.13045667,0.08349132,-0.46226075,-0.42612463,0.094284944,0.739335},
		{-0.02508549,-0.46776226,0.049247537,-0.5157509,-0.15704845,0.121427,0.25105396,-0.31930152,0.49365836,0.021278683,0.44722092,0.24983382,0.10568109,0.5125587,-0.086562686,0.23426999,0.14031972,0.03970563,-0.017638156,0.14427552,0.13047053,0.19001137,-0.8388304,0.7352588,-0.3918664,-0.26148847,0.3261784,-0.6939667,-0.040918812,-0.09075148,-0.26514837,-0.22894347},
		{0.34985244,0.30323696,0.13167073,-0.4171032,-0.47657922,-0.13101852,-0.25197256,-0.16961585,0.095212236,-0.022675933,-0.13469085,-0.14940482,-0.14958751,0.33053628,-0.17425385,-0.18452041,0.33456025,-0.22143036,-0.11844996,0.32985747,0.44793993,0.12737414,-0.14398094,0.19189902,-0.27232593,-0.25522813,0.0074429098,0.2901898,-0.14967579,-0.07457957,-0.2109429,-0.292428},
		{-0.120272994,-0.57611674,-0.22596739,0.007739164,-0.06590627,-0.45406982,-0.45311558,0.41422,0.33200568,0.75040376,-0.044376153,-0.5392226,0.037046157,-0.4787216,-0.09663128,-0.11945668,0.12173235,-0.5253003,0.275814,-0.6380983,0.448386,0.33818275,0.38313505,-0.09394926,0.6076359,-0.17402312,-0.18537202,-0.006750913,0.35675916,0.54583895,-0.27496606,0.029681867},
		{-0.20317875,0.20357265,0.33492032,-0.109731555,-0.512537,0.17480516,0.27955922,-0.35129765,0.3197381,-0.3777219,0.12458501,0.28006697,-0.015990332,0.13576448,-0.13981912,-0.16398308,-0.4611649,-0.19310118,-0.546659,0.20397255,-0.30745506,0.035325687,-0.102017045,0.21604526,-0.07525427,-0.33837178,0.37678552,0.14878862,-0.18445382,-0.093458585,-0.669083,0.045913696},
		{0.20710106,-0.119467184,0.08885861,-0.15473361,0.45290807,0.3287183,0.08240681,0.002947633,-0.48873514,0.20520937,-0.37250337,0.2998823,-0.25192288,-0.20085217,-0.47831583,-0.34397644,0.3197994,-0.10405338,-0.15029794,0.47571906,-0.030643307,-0.44336382,-0.05626648,-0.38438112,-0.075631246,0.17827125,-0.23805244,-0.29915488,-0.097528644,0.0111049805,0.3522155,-0.14683202},
		{0.49697995,0.24286906,0.08028697,0.14091791,0.12657616,-0.3130488,-0.33541083,-0.036892127,-0.14718273,0.0051696924,0.011877449,0.035446707,-0.09184296,0.36492708,0.029362481,-0.16590993,-0.123284385,-0.3486872,-0.16199972,0.16787921,-0.25356236,-0.3126757,0.21958014,-0.24426503,-0.11194332,-0.27699277,0.25787577,0.02037857,0.0019288289,0.0020435727,-0.062859625,-0.019287515},
		{0.19579495,0.11430069,0.045933627,-0.18535599,0.22575036,0.04207769,0.22379842,-0.04055775,-0.550441,-0.04140041,-0.10351,0.3276978,-0.30510423,0.07418611,-0.27245352,-0.2327297,0.1085107,-0.0020034395,-0.23273523,0.018892817,-0.051523197,-0.3432943,-0.034193367,0.027786152,0.20955007,0.03388961,0.41859448,0.14026226,-0.14099681,-0.056765277,0.17509308,0.14390595},
		{0.05134178,0.19128588,-0.10546337,-0.0038532275,-0.3606885,-0.2005748,-0.05644813,-0.034786645,-0.24967189,-0.13076936,0.08595499,-0.012802616,-0.01964505,0.09314708,0.03810772,0.35920525,0.47785538,0.14962675,0.2995989,0.060607295,0.13127998,-0.14422806,-0.20559014,0.20953134,0.20319651,-0.20926276,0.056788728,0.17620896,0.40934494,0.10784948,0.15803039,0.12307027},
		{0.6078055,-0.030211572,-0.13808489,0.06226465,-0.08362784,-0.027994212,-0.4689285,0.15503901,0.24637765,0.38280833,-0.303324,0.13589108,0.042688765,-0.24359332,-0.09704451,-0.22980358,0.10705059,-0.12697487,0.15451029,0.20533262,0.3700374,0.33707848,-0.1701081,-0.013460339,0.099981986,-0.08158234,-0.05416105,-0.18362665,0.061320864,0.19025952,0.1723078,-0.40910655},
		{0.061622813,-0.12723705,0.046557836,-0.49050236,-0.31299332,0.225289,-0.20740086,-0.39920184,0.08898204,0.14414303,-0.2501809,0.28224063,0.03750702,-0.16236408,0.07336915,-0.37004608,-0.06377721,-0.3928497,-0.08587112,0.3799983,0.26733077,0.13228795,0.11613493,-0.31497827,0.04326397,0.15678702,-0.38849947,0.3364358,-0.15057565,0.14644857,-0.17606331,-0.20614377},
		{0.33440688,-0.008849253,0.17076077,-0.16504472,0.17777535,0.35229155,-0.34923235,-0.41000897,0.06284815,-0.117270276,0.026664643,0.13524179,-0.08544453,-0.29375684,-0.025901936,-0.06508237,-0.19828118,-0.31698835,-0.35693663,0.44115552,-0.46496668,-0.3215575,0.09547147,0.005901011,-0.29111627,0.56235254,0.0109830275,0.14286703,-0.3082223,-0.29344222,0.28860554,-0.15161389},
		{-0.15740815,-0.40076828,-0.41402343,-0.13040642,-0.0026399675,-0.046860702,-0.4950043,0.05312144,-0.09501075,0.13891616,0.10724611,-0.30415538,0.10056882,0.08939906,0.0660803,0.16300169,-0.15818685,-0.051264327,0.042229954,0.04410851,-0.10423192,0.118899256,0.12185871,-0.10060051,0.251955,-0.2115557,-0.07870658,-0.28971222,0.13150649,0.100452535,-0.03233914,0.15667462},
		{0.12343767,0.609248,0.2755739,0.14947411,0.21577318,-0.29964778,0.14417326,0.071468055,-0.041437782,0.245691,-0.27802047,-0.041081782,-0.18377309,-0.0911722,-0.29377747,-0.19322498,0.085096925,-0.26131967,0.055600077,-0.1366642,0.16877955,0.018316314,0.21836063,-0.10486431,0.100043364,0.35938987,0.20384707,-0.029563481,0.17866907,-0.063109264,-0.19016443,-0.057911277},
		{-0.20841113,-0.03663322,0.22770044,-0.2970274,0.1328937,0.09718295,0.16360728,-0.40945375,-0.28099334,-0.26904988,-0.10868208,0.13350554,-0.1948324,-0.047206618,-0.26934668,-0.22113995,-0.31718242,0.22522365,-0.33468556,0.13705452,-0.24839178,0.019671595,-0.29638076,0.1303083,-0.21330501,0.048395425,0.00055810343,0.33512494,-0.33948064,-0.09092546,0.076129004,-0.15597151}};

	double hidden_1_weights[HIDDEN_LAYER_1_SIZE][NUMBER_OF_OUTPUT_WORDS] = {{0.17897975,0.06000333,0.5273755,-0.34827718,-0.017994994},
			{-0.043546468,0.53495336,0.40159383,-0.90929234,-0.01656018},
			{0.025898919,-0.01675271,0.3198315,0.13257775,-0.2966015},
			{0.32410637,-0.23869647,-0.51867896,-0.3932984,0.46507004},
			{0.34502754,0.29349533,0.07239309,-0.4825097,-0.56674755},
			{-0.94239557,-0.7890772,0.7038727,-0.60957426,-0.18481776},
			{-0.14937285,-0.37561736,0.13207743,0.34474686,-0.54898465},
			{0.2418161,-0.043871082,-0.37149745,-0.6361717,0.38709527},
			{-0.28584054,-0.84262,0.11349982,0.017884413,0.3295232},
			{-0.49584317,0.3796888,-0.3689138,-0.481103,0.39624575},
			{-0.0714391,-0.52864677,-0.49178505,0.4696502,-0.13948154},
			{-1.1493485,-0.03201298,0.6194165,-0.32689875,-0.46732298},
			{-0.055978343,0.14741476,-0.84850866,0.34684783,-0.11571834},
			{-0.58494353,-0.33520886,0.1223609,0.30974457,-0.35736015},
			{-1.0642221,0.28034514,-0.20972641,0.09984723,-0.7852343},
			{0.42881313,-0.31070212,-0.7158132,0.45924312,-0.10830985},
			{0.20139739,-0.8034517,0.0033965064,-0.175926,0.14186615},
			{0.4407833,-0.26308447,-0.58012587,0.26674938,-0.5676755},
			{0.24131377,-0.82760584,-0.50635374,-0.3156577,0.40779245},
			{-0.90456516,-0.21937151,0.69856954,-0.22125272,-0.71812904},
			{-0.6636383,-0.41934857,-0.06553176,-0.38161165,0.34596026},
			{-0.572049,-0.618798,0.054947868,0.0076985033,0.41210255},
			{-0.6209682,0.6874949,-0.72858423,-0.47875395,-0.016036047},
			{-0.6796439,-0.41619968,-0.07413573,0.374165,0.08295732},
			{-0.80677193,0.40595013,-0.6640922,-0.133035,-0.020983333},
			{-0.99636847,0.42385697,0.4083673,-0.49120602,-0.4509941},
			{-0.761994,-0.24027479,0.10742488,0.15609439,-0.6586307},
			{-1.0010064,0.3678332,0.101679854,-0.7472645,0.11998629},
			{0.02446671,-0.5379015,-0.567399,-0.211498,0.4941599},
			{-0.09180917,-0.41006806,-0.1761334,-0.46692696,0.28813958},
			{0.6063457,-0.059117228,-0.068350956,-0.51918626,-0.40882164},
			{-0.20575741,0.26260725,-0.55651796,0.2526885,-0.8721684}};

	// =============================== biases ==================================
	double hidden_1_bias[HIDDEN_LAYER_1_SIZE] = {0.07195872,0.07626408,-0.06004515,-0.13390145,0.11768138,-0.0035210701,0.33753514,0.28985214,0.56119597,0.382462,0.23678283,0.4075967,0.61232394,0.060663145,0.3623102,0.31028986,0.1064686,0.15030818,0.51034725,0.12840624,0.31378156,0.62824637,0.53100103,0.2907363,0.11101565,0.27712876,0.18350667,0.5476965,0.150441,0.22428133,-0.2616253,0.49973089};

	double output_bias[NUMBER_OF_OUTPUT_WORDS] = {-0.55365294,-0.13249503,0.17909035,0.06503442,-0.06353929};


/*****************************************************************************
* Main function
******************************************************************************/
int main()
{
	int word_cnt, test_case_cnt = 0;
	int success;
	AXIS_wLAST read_output, write_input;
	hls::stream<AXIS_wLAST> S_AXIS;
	hls::stream<AXIS_wLAST> M_AXIS;

	/************** Run a software version of the hardware function to validate results ************/
	// instead of hard-coding the results in test_result_expected_memory
	double input_arr[NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS];

	double hidden1[HIDDEN_LAYER_1_SIZE];
	double output[NUMBER_OF_OUTPUT_WORDS];
	double output_softmax[NUMBER_OF_OUTPUT_WORDS];

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){
		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){
			input_arr[word_cnt] = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
			//sum +=test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
		}
		for(int i = 0; i < HIDDEN_LAYER_1_SIZE; i++) {
			double connection = 0;
			for(int j = 0; j < NUMBER_OF_INPUT_WORDS; j++) {
				connection += input_arr[j] * input_weights[j][i];
			}
			connection += hidden_1_bias[i];
			hidden1[i] = connection > 0 ? connection : 0.01 * connection;
		}

		for(int i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++) {
			double connection = 0;
			for(int j = 0; j < HIDDEN_LAYER_1_SIZE; j++) {
				connection += hidden1[j] * hidden_1_weights[j][i];
			}
			connection += output_bias[i];
			output[i] = connection;
		}

		double m = -INFINITY;
		for (long int i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++){
			if (output[i] > m) {
				m = output[i];
			}
		}

		double sum = 0.0;
			for (size_t i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++){
			sum += expf(output[i] - m);
		}

		double offset = m + logf(sum);
		for (size_t i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++){
			output_softmax[i] = expf(output[i] - offset);
		}

		float max = 0;
		for (word_cnt=0; word_cnt < NUMBER_OF_OUTPUT_WORDS; word_cnt++) {
			test_result_expected_memory[word_cnt+test_case_cnt*NUMBER_OF_OUTPUT_WORDS] = output_softmax[word_cnt];
			if (output_softmax[word_cnt] > max) {
				max = output_softmax[word_cnt];
				c_result_prediction[test_case_cnt] = word_cnt;
			}
		}
	}

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){


		/******************** Input to Coprocessor : Transmit the Data Stream ***********************/

		printf(" Transmitting Data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){

			write_input.data = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
			write_input.last = 0;
			if(word_cnt==NUMBER_OF_INPUT_WORDS-1)
			{
				write_input.last = 1;
				// S_AXIS_TLAST is asserted for the last word.
				// Actually, doesn't matter since we are not making using of S_AXIS_TLAST.
			}
			S_AXIS.write(write_input); // insert one word into the stream
		}

		/* Transmission Complete */

		/********************* Call the hardware function (invoke the co-processor / ip) ***************/

		mlp_solution_hls(S_AXIS, M_AXIS);


		/******************** Output from Coprocessor : Receive the Data Stream ***********************/

		printf(" Receiving data for test case %d ... \r\n", test_case_cnt);
		float max = 0;
		for (int j=0 ; j < NUMBER_OF_OUTPUT_WORDS ; j++){

			read_output = M_AXIS.read(); // extract one word from the stream
			result_memory[j] = read_output.data;

			if (result_memory[j] > max) {
				max = result_memory[j];
				rtl_result_prediction[test_case_cnt] = j;

			}
		}

		/* Reception Complete */
	}

	/************************** Checking correctness of results *****************************/

	success = 1;

	/* Compare the data send with the data received */
	printf(" Comparing data ...\r\n");
	printf("c results:");
	for(int i = 0; i < NUMBER_OF_TEST_VECTORS; i++){
		std::cout << c_result_prediction[i];
	}
	std::cout << "\n";

	printf("rtl results: ");
	for(int i = 0; i < NUMBER_OF_TEST_VECTORS; i++){
		std::cout << rtl_result_prediction[i];
	}
	std::cout << "\n";

	int c_correct_prediction = 0;
	int rtl_correct_prediction = 0;
	for(word_cnt=0; word_cnt < NUMBER_OF_TEST_VECTORS; word_cnt++){

		if(rtl_result_prediction[word_cnt] == test_actual_prediction[word_cnt]) {
			rtl_correct_prediction++;
		}
		if(c_result_prediction[word_cnt] == test_actual_prediction[word_cnt]) {
			c_correct_prediction++;
		}
	}

	if(c_correct_prediction == rtl_correct_prediction) {
		success = 1;
	} else {
		success = 0;
	}

	if (success != 1){
		printf("Test Failed\r\n");
		return 1;
	}

	printf("Test Success\r\n");

	return 0;
}
