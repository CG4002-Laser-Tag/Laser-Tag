/*
----------------------------------------------------------------------------------
--	(c) Rajesh C Panicker, NUS,
--  Description : Self-checking testbench for AXI Stream Coprocessor (HLS) implementing the sum of 4 numbers
--	License terms :
--	You are free to use this code as long as you
--		(i) DO NOT post a modified version of this on any public repository;
--		(ii) use it only for educational purposes;
--		(iii) accept the responsibility to ensure that your implementation does not violate any intellectual property of any entity.
--		(iv) accept that the program is provided "as is" without warranty of any kind or assurance regarding its suitability for any particular purpose;
--		(v) send an email to rajesh.panicker@ieee.org briefly mentioning its use (except when used for the course EE4218 at the National University of Singapore);
--		(vi) retain this notice in this file or any files derived from this.
----------------------------------------------------------------------------------
*/

#include <stdio.h>
#include "hls_stream.h"
#include "ap_int.h"

/***************** AXIS with TLAST structure declaration *********************/

struct AXIS_wLAST{
	double data;
	bool last;
};

/***************** Coprocessor function declaration *********************/

void mlp_solution_hls(hls::stream<AXIS_wLAST>& S_AXIS, hls::stream<AXIS_wLAST>& M_AXIS);


/***************** Macros *********************/
#define NUMBER_OF_INPUT_WORDS 30  // length of an input vector
#define NUMBER_OF_OUTPUT_WORDS 3  // length of an input vector
#define NUMBER_OF_TEST_VECTORS 10  // number of such test vectors (cases)

#define HIDDEN_LAYER_1_SIZE 25

/************************** Variable Definitions *****************************/
//int test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05,0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05}; // 4 inputs * 2
double test_input_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS] = {0.3050025203548387,0.4475195293879845,0.5355742933800642,-1.1953125,0.96484375,-0.9778855847741936,0.7852111311764203,1.2461652448273612,-2.0,1.1484375,-0.059475806451612906,0.4977829006761008,0.4932869675930172,-1.047851563,0.912109375,-39.875504032258064,131.01913473818806,134.91600021123415,-220.734375,232.3203125,49.366431451612904,148.65692425640162,154.3472013041854,-228.4375,252.65625,91.27923387096774,137.9288067558928,163.5315424453612,-219.5390625,248.1328125,
		0.3169417843870968,0.4084586209243899,0.5117701186813375,-0.467773438,1.34375,-0.8568233367741936,0.8948316197908217,1.2284299181369258,-2.0,0.543945313,-0.09359249003225807,0.33352758132733495,0.3411917257385264,-1.076171875,0.71484375,-67.34122983870968,127.793012907188,142.61517165353547,-233.625,236.671875,66.59047379032258,172.70383566973325,182.47947059427344,-239.5859375,252.65625,84.46925403225806,141.50623043705326,162.8285362517868,-191.6640625,211.9453125,
		0.15439138106451614,0.8877503649687362,0.8868566995205867,-2.0,1.74609375,-0.9129599295161291,1.1415777467428188,1.4472929499889284,-2.0,1.33203125,0.04277973796774194,0.9347346037042363,0.9205292423429268,-1.372070313,1.999023438,18.95967741935484,100.93790777895842,101.09040782915818,-154.0234375,230.421875,-58.64969758064516,147.71209947546095,156.69976714876466,-252.4453125,214.2734375,-155.87399193548387,151.9035059804686,215.93293433854979,-249.90625,194.2578125,
		-0.32242313519354837,0.6787079913568423,0.741445692164287,-2.0,1.943359375,-0.5710055443548386,0.9702599748730227,1.11224271903476,-2.0,0.645507813,0.3726373488387097,1.1137707879895404,1.1572935258137227,-1.259765625,1.999023438,-79.29233870967742,175.1815326912453,189.69947422862944,-249.859375,250.3984375,-26.375252016129032,104.37999057281955,106.0159367882506,-221.578125,251.8203125,-27.748991935483872,147.03865405637507,147.28523750103363,-249.0,251.2578125,
		0.09926285296774194,0.7731717172087295,0.7670488410681348,-2.0,1.791015625,-0.8021988408064517,1.1236014777665517,1.3657518408117717,-2.0,1.111328125,-0.12427545370967742,0.5828807513400464,0.5867151627636273,-0.928710938,1.864257813,22.617691532258064,141.75615769183565,141.273311680024,-206.0546875,252.5546875,-34.64415322580645,151.78047538093705,153.27880133932467,-252.6796875,232.046875,-95.41154233870968,148.7758034860163,174.71002942592963,-235.359375,239.140625,
		-0.30276587725806453,0.3387097831356468,0.4502118492422212,-0.833984375,0.701171875,-0.8042149698709679,0.7574283161898684,1.0963361692427807,-2.0,0.294921875,-0.1682837702903226,0.43214940360948406,0.45721793557085433,-1.924804688,0.51953125,17.819808467741936,130.55094620957502,129.6584097113416,-254.6484375,245.6171875,-7.902721774193548,166.9619185266905,164.43691902564544,-249.6640625,250.59375,0.3528225806451613,157.41581001934372,154.85643469067847,-253.171875,247.0859375,
		-0.2807144658387097,0.47477504285852173,0.5449225807960367,-1.6484375,0.92578125,-1.0569556453548388,0.7643346753536477,1.297118856967369,-2.0,0.404296875,-0.1651020665483871,0.5650098930370298,0.5798249135237199,-2.0,1.138671875,39.040826612903224,137.5630601832346,140.84510323120458,-194.5078125,245.6171875,-9.60710685483871,158.17987531312352,155.90395928966387,-249.6640625,250.59375,24.602318548387096,173.6227617000435,172.56222793691896,-253.171875,247.0859375,
		-0.17578125006451614,0.856245708435185,0.8604682123894154,-2.0,1.999023438,-1.071005544483871,0.986115552930799,1.4450288051346092,-2.0,0.958984375,-0.5073399698709677,0.5761563642882648,0.7606850452310916,-1.362304688,0.772460938,-6.212953629032258,148.79492124644554,146.5071265731961,-211.9453125,196.015625,-40.379788306451616,135.0771173340183,138.88045163445938,-251.328125,231.2890625,-102.69934475806451,149.94298278692494,179.73535746695632,-248.6640625,173.3984375,
		-0.5366368448387098,0.5127395115719681,0.7364782457905306,-1.271484375,1.227539063,-0.8979964719677418,0.729027151866202,1.149231794166339,-2.0,0.36328125,0.3761340726129032,1.0904113123837145,1.1367140952312964,-1.494140625,1.876953125,-110.92338709677419,174.9479783101961,204.75223307304782,-235.6484375,243.3046875,-33.23991935483871,75.32407447455965,81.2132090924019,-173.0390625,242.953125,10.662802419354838,154.68553593419534,152.54327855863508,-249.25,251.0078125,
		-0.41885080667741936,0.4291139310551179,0.5946720137117432,-1.192382813,0.37890625,-0.9826738912903227,0.8060580227211184,1.2627028531395041,-2.0,0.26953125,-0.2615297380322581,0.5680058020980563,0.6169448570706472,-1.752929688,0.859375,32.46648185483871,129.92806062071406,131.8742404185122,-199.7578125,245.6171875,-16.007056451612904,179.61911985076108,177.4218454039158,-249.6640625,250.59375,-25.854334677419356,174.75120515113957,173.84284303629903,-253.171875,247.0859375};

double test_actual_prediction [NUMBER_OF_OUTPUT_WORDS*NUMBER_OF_TEST_VECTORS] = {2,2,0,1,0,2,2,0,1,2};

double test_result_expected_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS];// 4 outputs *2
double result_memory [NUMBER_OF_TEST_VECTORS*NUMBER_OF_OUTPUT_WORDS]; // same size as test_result_expected_memory

int c_result_prediction[NUMBER_OF_TEST_VECTORS];
int rtl_result_prediction[NUMBER_OF_TEST_VECTORS];

// ================ weights ===============
double input_weights[NUMBER_OF_INPUT_WORDS][HIDDEN_LAYER_1_SIZE] = {{0.13958499,0.16488439,0.0114955455,0.015478548,0.000505954,0.04594794,0.013517201,0.12162206,0.08970067,0.15353332,-0.0060423785,0.12321514,-0.06828783,-0.10013488,0.071880795,-0.046127763,0.05753978,0.023695217,-0.11853213,-0.10909804,-0.09839983,-0.16490611,-0.12581104,0.057556078,-0.01419702},
		{0.15153801,-0.15509097,-0.12461422,-0.05975962,-0.06793644,-0.078529894,0.088736735,0.097335346,-0.0706028,-0.14321762,-0.057954438,0.030559674,-0.10394761,-0.103784196,-0.028593965,-0.19902751,-0.04948916,-0.16017437,-0.0021327345,-0.17998782,0.09540945,-0.10188264,0.03536354,0.17574859,0.11286144},
		{-0.0427721,0.14095226,0.05629711,0.10316834,-0.012651622,-0.020007357,0.03303135,-0.1567189,-0.02206446,0.14392681,-0.08176492,-0.13886692,-0.16460067,0.10384851,-0.10440825,-0.15690698,-0.09523365,0.06417756,-0.029642805,-0.112066306,-0.17279331,0.0607326,-0.18412647,0.03066267,0.07832509},
		{0.16771472,0.03038384,-0.062875316,0.1359733,-0.123717695,-0.13665497,-0.06982944,-0.117452666,-0.11545686,0.10833279,-0.070525706,-0.14646538,0.008155286,0.10573647,0.076574326,0.041845907,-0.007872938,-0.14657353,0.02069074,0.06961712,-0.07061955,0.15415438,0.103052974,0.17898816,0.14046471},
		{-0.04000266,-0.05928266,0.055943698,-0.14191602,-0.12531804,0.16629928,0.09079066,-0.012626636,-0.010047984,0.2095554,-0.16912258,0.090826154,0.08090466,0.023718314,0.18692838,0.026298212,-0.100198336,-0.107818276,0.18186666,0.15227652,-0.035568878,-0.0668154,0.06149419,0.035721034,-0.051434074},
		{0.036841765,0.1128217,-0.038037777,-0.088165015,-0.1065141,-0.13400042,0.12605602,0.19721164,-0.10377743,-0.06926247,0.17400478,-0.13580622,0.040415138,-0.092819154,0.013373132,0.014910855,-0.08934566,-0.15921566,0.015460803,-0.054309025,-0.15514246,-0.05872456,0.0039890585,0.10544315,0.015017691},
		{-0.08888716,0.028454334,0.15142554,0.16799562,-0.062494673,0.097577006,0.073828146,0.024440166,-0.11196712,-0.12693796,-0.09164376,-0.022479892,0.036103994,-0.16452985,-0.0034647074,-0.05081538,0.09999293,0.16579697,0.116207145,-0.05310695,-0.116096795,-0.18034348,0.0757115,0.14636281,0.07995347},
		{0.10722265,0.14751324,-0.10821207,-0.06282732,-0.1441023,0.064163804,-0.03774443,-0.057233576,0.056009587,0.06489605,0.028306615,0.08758193,-0.13846198,0.00655832,-0.14756443,0.17868792,-0.037411395,-0.16565965,0.15072958,0.09748608,-0.029799506,-0.1100792,-3.8665363e-05,0.15261802,-0.12627433},
		{0.16094697,0.019958958,-0.108886875,-0.075721316,0.15308294,0.05932857,-0.058143258,0.08246323,-0.06013919,0.08518298,-0.04434116,-0.084497534,-0.1705037,0.062471654,-0.08157813,0.016560601,0.16381593,0.13058749,0.13585332,-0.09007679,0.13853082,-0.15566519,0.10508124,-0.102191105,-0.19259329},
		{-0.13394156,-0.057579003,-0.10889345,-0.18381695,-0.03623441,-0.09870803,0.025610251,-0.06632199,0.120480165,-0.14854568,-0.0025558749,-0.019907877,0.003215015,-0.112879455,0.09277445,-0.1279809,0.1915052,-0.0006764272,-0.05257043,-0.08632702,0.17630354,-0.06295654,-0.14121333,0.16785687,-0.083359815},
		{0.15869278,0.049054697,0.16421503,-0.08466855,0.15708622,0.16595107,0.004507502,-0.1136886,-0.04450748,-0.09696029,0.19453292,-0.015892074,0.16647738,-0.012374726,0.057528015,-0.00063332473,0.065190166,-0.02799257,-0.040204085,0.11248934,0.1161651,0.052289106,-0.02093434,0.11059713,0.0868274},
		{0.03417045,-0.04951036,0.06084305,0.06299746,0.05688685,0.04012075,-0.02129226,0.15504412,-0.097406186,-0.096389234,0.064939715,-0.04319401,0.105330944,0.12157415,-0.008017552,0.027525028,0.10625003,0.12091389,0.10215373,-0.15907718,-0.10901942,-0.16197944,0.073385075,-0.08536786,-0.18261345},
		{0.13488743,0.07683772,0.17568213,-0.010872173,-0.15460327,0.023486346,0.14468439,-0.062388808,0.002657561,0.0044847718,-0.17877947,-0.09257098,-0.10630094,0.0070281187,-0.05480945,0.046248585,0.082229406,-0.010123871,-0.03624305,0.02232422,-0.11944389,0.1646906,0.17493518,-0.08712502,-0.16621311},
		{0.024726123,0.16300628,-0.15067413,-0.15207067,0.12634775,-0.16089438,0.13720883,-0.040935524,-0.1063606,-0.101434484,0.09202522,-0.16275363,-0.023699686,0.0145813385,0.094694525,-0.13204081,-0.02219316,0.10733153,0.07272197,0.16128275,0.15933123,0.110714525,0.097417265,-0.15313339,0.09834613},
		{0.08803511,0.105538756,-0.18109097,0.014858622,-0.050234333,0.07664254,0.010606941,-0.16090277,-0.016817192,-0.05846687,0.15563789,-0.14758512,-0.13459069,-0.045554254,-0.1275754,0.049986567,0.031027956,0.13880068,-0.026143009,0.03130901,0.06457968,-0.16421431,-0.14142576,0.045851186,0.09149128},
		{-0.025777832,-0.079816416,-0.14283943,-0.186985,-0.06998544,-0.027389884,-0.1006734,0.09952827,-0.23185605,-0.007959395,0.04020344,-0.097761475,-0.08807806,-0.18894492,0.12836373,-0.08079051,-0.0064397114,-0.15198298,-0.13802493,0.049649946,0.0048505813,-0.09965655,0.14102843,-0.14798537,0.16292253},
		{0.14074385,0.10539362,-0.12281565,-0.13753809,-0.15154944,-0.08364166,0.015369679,0.13299498,0.11494526,-0.15983021,0.10240171,0.17633703,0.03306389,-0.17083648,-0.064585835,-0.13498,0.069460966,0.077313505,0.08625849,-0.10632959,0.024708152,0.060057994,-0.04059965,0.07712385,-0.123242855},
		{0.026985822,0.03266731,0.07394987,-0.07925494,-0.18150806,0.15682146,0.007871473,0.06263086,-0.11155683,0.15953137,0.16014902,-0.08818602,0.09941867,-0.08758386,0.009215064,-0.08457104,0.1731765,0.041403476,0.039640915,-0.0025187416,-0.14673428,-0.03586866,-0.038814764,0.05765651,-0.11989421},
		{-0.085232496,0.09271756,0.0653754,-0.17224635,0.052236423,0.040704697,0.030413838,-0.12067761,0.0776007,0.13699715,-0.00824322,-0.12260367,0.15123883,-0.0900171,-0.042966615,0.15457225,-0.047997195,0.032737777,0.06898605,0.010038716,-0.060958862,-0.020062953,-0.16258492,-0.15862085,0.076197326},
		{0.046537284,-0.11127989,0.15170535,-0.10513504,-0.039882213,-0.10101399,0.053040136,-0.19001132,0.08384932,-0.012427736,0.019074593,0.04425493,-0.16762246,0.04999254,0.0353694,0.16633837,-0.077171445,0.033644065,0.19115204,0.044810396,0.17574921,-0.08461072,-0.028933084,0.049751624,0.17637637},
		{-0.08411861,-0.18073173,-0.09428594,0.2315293,0.07108036,-0.0924079,-0.1381415,-0.16735876,0.12512405,-0.05003512,-0.10644655,0.05031933,0.12207189,-0.05834309,-0.09049567,0.16869082,-0.09066609,0.044649407,0.11808067,0.07093847,-0.04502867,0.13580358,0.14139672,-0.014848858,0.13156752},
		{-0.021411113,-0.07053946,-0.12446298,0.04496278,-0.14983195,-0.008718967,-0.07744824,0.11896979,-0.15624344,-0.058156412,-0.05750902,0.10003418,-0.12876813,-0.07685384,0.13318036,0.1297558,-0.09654569,-0.08082138,0.18193458,0.15864378,-0.009158671,-0.1103338,0.025280675,0.08340314,0.057952486},
		{-0.07415403,-0.14003856,0.096869856,0.06780221,0.13554838,0.10194236,0.14332257,0.07026888,0.11595089,-0.14846012,0.11479941,0.13877836,0.06836805,0.16814026,-0.0035801406,0.16036329,0.019876989,-0.016388949,0.018708587,-0.13935877,-0.15159702,0.143374,-0.104857005,0.10475916,0.091429755},
		{0.1211144,0.14980921,-0.0737973,-0.17597182,-0.13401926,-0.04665388,0.07040448,0.16508344,-0.07658011,-0.19531254,0.11296877,0.10167083,0.15450254,0.07369253,0.126254,-0.0357935,0.12668009,0.1664457,-0.16553311,0.0054722354,-0.1021333,0.019768318,0.06216517,-0.18150522,0.14781539},
		{-0.14411871,0.052587092,0.11080861,-0.10292573,-0.0315257,-0.104172245,0.0035087308,0.087525494,0.07205758,0.080887444,-0.1335077,-0.18102248,0.0025637746,0.124969274,0.17961435,-0.087212466,0.14391257,0.13006905,-0.116809696,-0.09122039,-0.0037280917,0.032511976,-0.06048866,0.16743857,-0.101929605},
		{-0.08416858,0.075624704,-0.043324962,0.010714698,0.038134217,-0.06252123,-0.055910233,0.005377171,0.14969291,-0.14260277,-0.12652716,0.016192257,0.16610762,-0.07721545,-0.14807901,0.13367179,0.03886425,-0.01588521,-0.10892559,-0.14442785,-0.11340768,0.13733426,0.17804483,0.15311438,-0.08715356},
		{-0.051554453,0.05774112,0.10444081,0.03888599,0.094254255,-0.13639659,-0.10820999,-0.01483132,-0.03093612,-0.094268955,-0.14315443,0.11059487,-0.15556261,-0.0878342,-0.11842601,-0.08017692,-0.13729167,-0.16571108,-0.15179968,-0.014619912,-0.022640958,-0.041467156,-0.16036175,0.07264328,0.1474592},
		{-0.10977684,-0.0031760484,-0.1418543,-0.1591651,0.14739403,0.065111876,-0.17148073,-0.15031685,-0.0055985395,0.010373719,-0.19945794,-0.016874507,-0.06973589,0.051711436,0.16862118,-0.11256971,-0.10478807,0.015316172,-0.08237043,-0.16070853,0.07430023,-0.11535574,-0.058844402,-0.16686569,-0.10038039},
		{0.017232405,0.14288408,-0.09213602,-0.08723457,0.16631764,0.14131975,-0.06526151,-0.14737433,-0.04177447,-0.07520153,-0.12183923,-0.107587166,0.10648692,-0.11237794,0.12819044,-0.07027704,-0.041807532,-0.13145806,-0.17838183,0.12741837,-0.17858993,-0.026986483,-0.17193894,-0.06521929,-0.11500446},
		{-0.1803247,-0.12972143,0.055662572,-0.092642516,-0.1447671,-0.1718827,0.07409528,-0.17884156,-0.14803886,-0.043811325,-0.06304538,0.17405525,-0.03977704,-0.1280345,-0.12592225,0.04948241,-0.030217718,0.15131533,-0.15740164,0.02114547,0.05422674,0.14197268,-0.074370936,-0.052911624,0.14466979}};

	double hidden_1_weights[HIDDEN_LAYER_1_SIZE][NUMBER_OF_OUTPUT_WORDS] = {{-0.03657608,-0.040115792,0.010145239},
			{-0.13704967,0.079437956,0.120039806},
			{0.043995544,-0.23154052,-0.085496135},
			{-0.07408395,0.11938119,0.17422041},
			{-0.025324196,-0.06215675,-0.071676284},
			{0.027726367,-0.15213425,0.12082185},
			{-0.08988825,0.09133781,-0.14339902},
			{0.042521823,0.10158476,-0.1701149},
			{-0.06996654,0.20858002,-0.023290558},
			{5.7052384e-05,-0.15276958,-0.31524333},
			{-0.19100603,-0.09448378,0.06762154},
			{0.13220547,-0.0145058045,-0.105433315},
			{0.04770735,0.054252252,-0.01666364},
			{-0.08125844,0.02900853,0.075112745},
			{0.3429321,-0.02296792,-0.2688405},
			{-0.16854924,-0.18247813,0.20897742},
			{0.006099164,0.22994813,-0.27146497},
			{0.12873054,0.09468505,-0.11428749},
			{-0.13683163,-0.1111464,-0.15016712},
			{0.12898828,0.14229144,-0.060495466},
			{-0.15637603,0.044757567,-0.04418306},
			{-0.27676737,0.20354185,0.14086834},
			{-0.04297688,-0.10901103,-0.03746325},
			{-0.10729055,-0.15171981,0.122692816},
			{0.29724813,-0.2243113,0.20290445}};

	// =============================== biases ==================================
	double hidden_1_bias[HIDDEN_LAYER_1_SIZE] = {0.05760619,0.05898425,-0.07738232,0.008683317,0.16709787,-0.10958469,0.0111303255,0.07981217,-0.12030168,0.19257967,-0.110219255,-0.043842643,-0.049399152,-0.12738381,-0.16417632,0.112602964,0.05139141,-0.16383624,-0.106258415,0.1804505,0.06978625,0.07040119,-0.11335878,-0.08003981,-0.012046333};

	double output_bias[NUMBER_OF_OUTPUT_WORDS] = {0.09927703,-0.13175182,-0.15860066};


/*****************************************************************************
* Main function
******************************************************************************/
int main()
{
	int word_cnt, test_case_cnt = 0;
	int success;
	AXIS_wLAST read_output, write_input;
	hls::stream<AXIS_wLAST> S_AXIS;
	hls::stream<AXIS_wLAST> M_AXIS;

	/************** Run a software version of the hardware function to validate results ************/
	// instead of hard-coding the results in test_result_expected_memory
	double input_arr[NUMBER_OF_TEST_VECTORS*NUMBER_OF_INPUT_WORDS];

	double hidden1[HIDDEN_LAYER_1_SIZE];
	double output[NUMBER_OF_OUTPUT_WORDS];
	double output_softmax[NUMBER_OF_OUTPUT_WORDS];

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){
		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){
			input_arr[word_cnt] = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
			//sum +=test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
		}
		for(int i = 0; i < HIDDEN_LAYER_1_SIZE; i++) {
			double connection = 0;
			for(int j = 0; j < NUMBER_OF_INPUT_WORDS; j++) {
				connection += input_arr[j] * input_weights[j][i];
			}
			connection += hidden_1_bias[i];
			hidden1[i] = 1.0 / (1.0 + exp(-connection));
		}

		for(int i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++) {
			double connection = 0;
			for(int j = 0; j < HIDDEN_LAYER_1_SIZE; j++) {
				connection += hidden1[j] * hidden_1_weights[j][i];
			}
			connection += output_bias[i];
			output[i] = connection;
		}

		double m = -INFINITY;
		for (long int i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++){
			if (output[i] > m) {
				m = output[i];
			}
		}

		double sum = 0.0;
			for (size_t i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++){
			sum += expf(output[i] - m);
		}

		double offset = m + logf(sum);
		for (size_t i = 0; i < NUMBER_OF_OUTPUT_WORDS; i++){
			output_softmax[i] = expf(output[i] - offset);
		}

		float max = 0;
		for (word_cnt=0; word_cnt < NUMBER_OF_OUTPUT_WORDS; word_cnt++) {
			test_result_expected_memory[word_cnt+test_case_cnt*NUMBER_OF_OUTPUT_WORDS] = output_softmax[word_cnt];
			if (output_softmax[word_cnt] > max) {
				max = output_softmax[word_cnt];
				c_result_prediction[test_case_cnt] = word_cnt;
			}
		}
	}

	for (test_case_cnt=0 ; test_case_cnt < NUMBER_OF_TEST_VECTORS ; test_case_cnt++){


		/******************** Input to Coprocessor : Transmit the Data Stream ***********************/

		printf(" Transmitting Data for test case %d ... \r\n", test_case_cnt);

		for (word_cnt=0 ; word_cnt < NUMBER_OF_INPUT_WORDS ; word_cnt++){

			write_input.data = test_input_memory[word_cnt+test_case_cnt*NUMBER_OF_INPUT_WORDS];
			write_input.last = 0;
			if(word_cnt==NUMBER_OF_INPUT_WORDS-1)
			{
				write_input.last = 1;
				// S_AXIS_TLAST is asserted for the last word.
				// Actually, doesn't matter since we are not making using of S_AXIS_TLAST.
			}
			S_AXIS.write(write_input); // insert one word into the stream
		}

		/* Transmission Complete */

		/********************* Call the hardware function (invoke the co-processor / ip) ***************/

		mlp_solution_hls(S_AXIS, M_AXIS);


		/******************** Output from Coprocessor : Receive the Data Stream ***********************/

		printf(" Receiving data for test case %d ... \r\n", test_case_cnt);
		float max = 0;
		for (int j=0 ; j < NUMBER_OF_OUTPUT_WORDS ; j++){

			read_output = M_AXIS.read(); // extract one word from the stream
			result_memory[j] = read_output.data;

			if (result_memory[j] > max) {
				max = result_memory[j];
				rtl_result_prediction[test_case_cnt] = j;

			}
		}

		/* Reception Complete */
	}

	/************************** Checking correctness of results *****************************/

	success = 1;

	/* Compare the data send with the data received */
	printf(" Comparing data ...\r\n");
	printf("c results:");
	for(int i = 0; i < NUMBER_OF_TEST_VECTORS; i++){
		std::cout << c_result_prediction[i];
	}
	std::cout << "\n";

	printf("rtl results: ");
	for(int i = 0; i < NUMBER_OF_TEST_VECTORS; i++){
		std::cout << rtl_result_prediction[i];
	}
	std::cout << "\n";

	int c_correct_prediction = 0;
	int rtl_correct_prediction = 0;
	for(word_cnt=0; word_cnt < NUMBER_OF_TEST_VECTORS; word_cnt++){

		if(rtl_result_prediction[word_cnt] == test_actual_prediction[word_cnt]) {
			rtl_correct_prediction++;
		}
		if(c_result_prediction[word_cnt] == test_actual_prediction[word_cnt]) {
			c_correct_prediction++;
		}
	}

	if(c_correct_prediction == rtl_correct_prediction) {
		success = 1;
	} else {
		success = 0;
	}

	if (success != 1){
		printf("Test Failed\r\n");
		return 1;
	}

	printf("Test Success\r\n");

	return 0;
}
